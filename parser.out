Grammar:

Rule 0     S' -> statement
Rule 1     statement -> expr
Rule 2     statement -> DEL NAME
Rule 3     statement -> var_assign
Rule 4     statement -> NAME ( )
Rule 5     statement -> FUN NAME ( ) : statement
Rule 6     statement -> IF ( condition ) : statement ELSE statement
Rule 7     statement -> IF ( condition ) : statement
Rule 8     statement -> WHILE ( condition ) : statement
Rule 9     statement -> FASTERLOOP ( var_assign TO expr ) : statement
Rule 10    statement -> FOR ( var_assign TO expr ) : statement
Rule 11    statement -> PRINT ( statement )
Rule 12    statement -> <empty>
Rule 13    condition -> expr LEQ expr
Rule 14    condition -> expr EQEQ expr
Rule 15    var_assign -> NAME = statement
Rule 16    var_assign -> NAME = STRING
Rule 17    var_assign -> NAME = expr
Rule 18    expr -> FLOAT
Rule 19    expr -> NUMBER
Rule 20    expr -> NAME
Rule 21    expr -> - expr  [precedence=right, level=3]
Rule 22    expr -> expr / expr  [precedence=left, level=2]
Rule 23    expr -> expr * expr  [precedence=left, level=2]
Rule 24    expr -> expr - expr  [precedence=left, level=1]
Rule 25    expr -> expr + expr  [precedence=left, level=1]

Terminals, with rules where they appear:

(                    : 4 5 6 7 8 9 10 11
)                    : 4 5 6 7 8 9 10 11
*                    : 23
+                    : 25
-                    : 21 24
/                    : 22
:                    : 5 6 7 8 9 10
=                    : 15 16 17
DEL                  : 2
ELSE                 : 6
EQEQ                 : 14
FASTERLOOP           : 9
FLOAT                : 18
FOR                  : 10
FUN                  : 5
IF                   : 6 7
LEQ                  : 13
NAME                 : 2 4 5 15 16 17 20
NUMBER               : 19
PRINT                : 11
STRING               : 16
TO                   : 9 10
WHILE                : 8
error                : 

Nonterminals, with rules where they appear:

condition            : 6 7 8
expr                 : 1 9 10 13 13 14 14 17 21 22 22 23 23 24 24 25 25
statement            : 5 6 6 7 8 9 10 11 15 0
var_assign           : 3 9 10


state 0

    (0) S' -> . statement
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    statement                      shift and go to state 1
    expr                           shift and go to state 2
    var_assign                     shift and go to state 5

state 1

    (0) S' -> statement .


state 2

    (1) statement -> expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    $end            reduce using rule 1 (statement -> expr .)
    )               reduce using rule 1 (statement -> expr .)
    TO              reduce using rule 1 (statement -> expr .)
    ELSE            reduce using rule 1 (statement -> expr .)
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 3

    (2) statement -> DEL . NAME
    NAME            shift and go to state 19


state 4

    (4) statement -> NAME . ( )
    (20) expr -> NAME .
    (15) var_assign -> NAME . = statement
    (16) var_assign -> NAME . = STRING
    (17) var_assign -> NAME . = expr
    (               shift and go to state 20
    /               reduce using rule 20 (expr -> NAME .)
    *               reduce using rule 20 (expr -> NAME .)
    -               reduce using rule 20 (expr -> NAME .)
    +               reduce using rule 20 (expr -> NAME .)
    $end            reduce using rule 20 (expr -> NAME .)
    TO              reduce using rule 20 (expr -> NAME .)
    )               reduce using rule 20 (expr -> NAME .)
    ELSE            reduce using rule 20 (expr -> NAME .)
    =               shift and go to state 21


state 5

    (3) statement -> var_assign .
    $end            reduce using rule 3 (statement -> var_assign .)
    TO              reduce using rule 3 (statement -> var_assign .)
    )               reduce using rule 3 (statement -> var_assign .)
    ELSE            reduce using rule 3 (statement -> var_assign .)


state 6

    (5) statement -> FUN . NAME ( ) : statement
    NAME            shift and go to state 22


state 7

    (6) statement -> IF . ( condition ) : statement ELSE statement
    (7) statement -> IF . ( condition ) : statement
    (               shift and go to state 23


state 8

    (8) statement -> WHILE . ( condition ) : statement
    (               shift and go to state 24


state 9

    (9) statement -> FASTERLOOP . ( var_assign TO expr ) : statement
    (               shift and go to state 25


state 10

    (10) statement -> FOR . ( var_assign TO expr ) : statement
    (               shift and go to state 26


state 11

    (11) statement -> PRINT . ( statement )
    (               shift and go to state 27


state 12

    (18) expr -> FLOAT .
    /               reduce using rule 18 (expr -> FLOAT .)
    *               reduce using rule 18 (expr -> FLOAT .)
    -               reduce using rule 18 (expr -> FLOAT .)
    +               reduce using rule 18 (expr -> FLOAT .)
    $end            reduce using rule 18 (expr -> FLOAT .)
    TO              reduce using rule 18 (expr -> FLOAT .)
    )               reduce using rule 18 (expr -> FLOAT .)
    ELSE            reduce using rule 18 (expr -> FLOAT .)
    LEQ             reduce using rule 18 (expr -> FLOAT .)
    EQEQ            reduce using rule 18 (expr -> FLOAT .)


state 13

    (19) expr -> NUMBER .
    /               reduce using rule 19 (expr -> NUMBER .)
    *               reduce using rule 19 (expr -> NUMBER .)
    -               reduce using rule 19 (expr -> NUMBER .)
    +               reduce using rule 19 (expr -> NUMBER .)
    $end            reduce using rule 19 (expr -> NUMBER .)
    TO              reduce using rule 19 (expr -> NUMBER .)
    )               reduce using rule 19 (expr -> NUMBER .)
    ELSE            reduce using rule 19 (expr -> NUMBER .)
    LEQ             reduce using rule 19 (expr -> NUMBER .)
    EQEQ            reduce using rule 19 (expr -> NUMBER .)


state 14

    (21) expr -> - . expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 28

state 15

    (22) expr -> expr / . expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 30

state 16

    (23) expr -> expr * . expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 31

state 17

    (24) expr -> expr - . expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 32

state 18

    (25) expr -> expr + . expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 33

state 19

    (2) statement -> DEL NAME .
    $end            reduce using rule 2 (statement -> DEL NAME .)
    TO              reduce using rule 2 (statement -> DEL NAME .)
    )               reduce using rule 2 (statement -> DEL NAME .)
    ELSE            reduce using rule 2 (statement -> DEL NAME .)


state 20

    (4) statement -> NAME ( . )
    )               shift and go to state 34


state 21

    (15) var_assign -> NAME = . statement
    (16) var_assign -> NAME = . STRING
    (17) var_assign -> NAME = . expr
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    STRING          shift and go to state 36
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    TO              reduce using rule 12 (statement -> .)
    )               reduce using rule 12 (statement -> .)
    ELSE            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    statement                      shift and go to state 35
    expr                           shift and go to state 37
    var_assign                     shift and go to state 5

state 22

    (5) statement -> FUN NAME . ( ) : statement
    (               shift and go to state 38


state 23

    (6) statement -> IF ( . condition ) : statement ELSE statement
    (7) statement -> IF ( . condition ) : statement
    (13) condition -> . expr LEQ expr
    (14) condition -> . expr EQEQ expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    condition                      shift and go to state 39
    expr                           shift and go to state 40

state 24

    (8) statement -> WHILE ( . condition ) : statement
    (13) condition -> . expr LEQ expr
    (14) condition -> . expr EQEQ expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    condition                      shift and go to state 41
    expr                           shift and go to state 40

state 25

    (9) statement -> FASTERLOOP ( . var_assign TO expr ) : statement
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    NAME            shift and go to state 43

    var_assign                     shift and go to state 42

state 26

    (10) statement -> FOR ( . var_assign TO expr ) : statement
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    NAME            shift and go to state 43

    var_assign                     shift and go to state 44

state 27

    (11) statement -> PRINT ( . statement )
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    )               reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    statement                      shift and go to state 45
    expr                           shift and go to state 2
    var_assign                     shift and go to state 5

state 28

    (21) expr -> - expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    /               reduce using rule 21 (expr -> - expr .)
    *               reduce using rule 21 (expr -> - expr .)
    -               reduce using rule 21 (expr -> - expr .)
    +               reduce using rule 21 (expr -> - expr .)
    $end            reduce using rule 21 (expr -> - expr .)
    TO              reduce using rule 21 (expr -> - expr .)
    )               reduce using rule 21 (expr -> - expr .)
    ELSE            reduce using rule 21 (expr -> - expr .)
    LEQ             reduce using rule 21 (expr -> - expr .)
    EQEQ            reduce using rule 21 (expr -> - expr .)


state 29

    (20) expr -> NAME .
    /               reduce using rule 20 (expr -> NAME .)
    *               reduce using rule 20 (expr -> NAME .)
    -               reduce using rule 20 (expr -> NAME .)
    +               reduce using rule 20 (expr -> NAME .)
    $end            reduce using rule 20 (expr -> NAME .)
    TO              reduce using rule 20 (expr -> NAME .)
    )               reduce using rule 20 (expr -> NAME .)
    ELSE            reduce using rule 20 (expr -> NAME .)
    LEQ             reduce using rule 20 (expr -> NAME .)
    EQEQ            reduce using rule 20 (expr -> NAME .)


state 30

    (22) expr -> expr / expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    /               reduce using rule 22 (expr -> expr / expr .)
    *               reduce using rule 22 (expr -> expr / expr .)
    -               reduce using rule 22 (expr -> expr / expr .)
    +               reduce using rule 22 (expr -> expr / expr .)
    $end            reduce using rule 22 (expr -> expr / expr .)
    TO              reduce using rule 22 (expr -> expr / expr .)
    )               reduce using rule 22 (expr -> expr / expr .)
    ELSE            reduce using rule 22 (expr -> expr / expr .)
    LEQ             reduce using rule 22 (expr -> expr / expr .)
    EQEQ            reduce using rule 22 (expr -> expr / expr .)


state 31

    (23) expr -> expr * expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    /               reduce using rule 23 (expr -> expr * expr .)
    *               reduce using rule 23 (expr -> expr * expr .)
    -               reduce using rule 23 (expr -> expr * expr .)
    +               reduce using rule 23 (expr -> expr * expr .)
    $end            reduce using rule 23 (expr -> expr * expr .)
    TO              reduce using rule 23 (expr -> expr * expr .)
    )               reduce using rule 23 (expr -> expr * expr .)
    ELSE            reduce using rule 23 (expr -> expr * expr .)
    LEQ             reduce using rule 23 (expr -> expr * expr .)
    EQEQ            reduce using rule 23 (expr -> expr * expr .)


state 32

    (24) expr -> expr - expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    -               reduce using rule 24 (expr -> expr - expr .)
    +               reduce using rule 24 (expr -> expr - expr .)
    $end            reduce using rule 24 (expr -> expr - expr .)
    TO              reduce using rule 24 (expr -> expr - expr .)
    )               reduce using rule 24 (expr -> expr - expr .)
    ELSE            reduce using rule 24 (expr -> expr - expr .)
    LEQ             reduce using rule 24 (expr -> expr - expr .)
    EQEQ            reduce using rule 24 (expr -> expr - expr .)
    /               shift and go to state 15
    *               shift and go to state 16


state 33

    (25) expr -> expr + expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    -               reduce using rule 25 (expr -> expr + expr .)
    +               reduce using rule 25 (expr -> expr + expr .)
    $end            reduce using rule 25 (expr -> expr + expr .)
    TO              reduce using rule 25 (expr -> expr + expr .)
    )               reduce using rule 25 (expr -> expr + expr .)
    ELSE            reduce using rule 25 (expr -> expr + expr .)
    LEQ             reduce using rule 25 (expr -> expr + expr .)
    EQEQ            reduce using rule 25 (expr -> expr + expr .)
    /               shift and go to state 15
    *               shift and go to state 16


state 34

    (4) statement -> NAME ( ) .
    $end            reduce using rule 4 (statement -> NAME ( ) .)
    TO              reduce using rule 4 (statement -> NAME ( ) .)
    )               reduce using rule 4 (statement -> NAME ( ) .)
    ELSE            reduce using rule 4 (statement -> NAME ( ) .)


state 35

    (15) var_assign -> NAME = statement .
    $end            reduce using rule 15 (var_assign -> NAME = statement .)
    TO              reduce using rule 15 (var_assign -> NAME = statement .)
    )               reduce using rule 15 (var_assign -> NAME = statement .)
    ELSE            reduce using rule 15 (var_assign -> NAME = statement .)


state 36

    (16) var_assign -> NAME = STRING .
    $end            reduce using rule 16 (var_assign -> NAME = STRING .)
    TO              reduce using rule 16 (var_assign -> NAME = STRING .)
    )               reduce using rule 16 (var_assign -> NAME = STRING .)
    ELSE            reduce using rule 16 (var_assign -> NAME = STRING .)


state 37

    (17) var_assign -> NAME = expr .
    (1) statement -> expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
  ! reduce/reduce conflict for $end resolved using rule 17 (var_assign -> NAME = expr .)
  ! reduce/reduce conflict for TO resolved using rule 17 (var_assign -> NAME = expr .)
  ! reduce/reduce conflict for ) resolved using rule 17 (var_assign -> NAME = expr .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (var_assign -> NAME = expr .)
    $end            reduce using rule 17 (var_assign -> NAME = expr .)
    TO              reduce using rule 17 (var_assign -> NAME = expr .)
    )               reduce using rule 17 (var_assign -> NAME = expr .)
    ELSE            reduce using rule 17 (var_assign -> NAME = expr .)
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 38

    (5) statement -> FUN NAME ( . ) : statement
    )               shift and go to state 46


state 39

    (6) statement -> IF ( condition . ) : statement ELSE statement
    (7) statement -> IF ( condition . ) : statement
    )               shift and go to state 47


state 40

    (13) condition -> expr . LEQ expr
    (14) condition -> expr . EQEQ expr
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    LEQ             shift and go to state 48
    EQEQ            shift and go to state 49
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 41

    (8) statement -> WHILE ( condition . ) : statement
    )               shift and go to state 50


state 42

    (9) statement -> FASTERLOOP ( var_assign . TO expr ) : statement
    TO              shift and go to state 51


state 43

    (15) var_assign -> NAME . = statement
    (16) var_assign -> NAME . = STRING
    (17) var_assign -> NAME . = expr
    =               shift and go to state 21


state 44

    (10) statement -> FOR ( var_assign . TO expr ) : statement
    TO              shift and go to state 52


state 45

    (11) statement -> PRINT ( statement . )
    )               shift and go to state 53


state 46

    (5) statement -> FUN NAME ( ) . : statement
    :               shift and go to state 54


state 47

    (6) statement -> IF ( condition ) . : statement ELSE statement
    (7) statement -> IF ( condition ) . : statement
    :               shift and go to state 55


state 48

    (13) condition -> expr LEQ . expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 56

state 49

    (14) condition -> expr EQEQ . expr
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 57

state 50

    (8) statement -> WHILE ( condition ) . : statement
    :               shift and go to state 58


state 51

    (9) statement -> FASTERLOOP ( var_assign TO . expr ) : statement
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 59

state 52

    (10) statement -> FOR ( var_assign TO . expr ) : statement
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    NAME            shift and go to state 29
    -               shift and go to state 14

    expr                           shift and go to state 60

state 53

    (11) statement -> PRINT ( statement ) .
    $end            reduce using rule 11 (statement -> PRINT ( statement ) .)
    TO              reduce using rule 11 (statement -> PRINT ( statement ) .)
    )               reduce using rule 11 (statement -> PRINT ( statement ) .)
    ELSE            reduce using rule 11 (statement -> PRINT ( statement ) .)


state 54

    (5) statement -> FUN NAME ( ) : . statement
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    TO              reduce using rule 12 (statement -> .)
    )               reduce using rule 12 (statement -> .)
    ELSE            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    statement                      shift and go to state 61
    expr                           shift and go to state 2
    var_assign                     shift and go to state 5

state 55

    (6) statement -> IF ( condition ) : . statement ELSE statement
    (7) statement -> IF ( condition ) : . statement
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    TO              reduce using rule 12 (statement -> .)
    )               reduce using rule 12 (statement -> .)
    ELSE            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    statement                      shift and go to state 62
    expr                           shift and go to state 2
    var_assign                     shift and go to state 5

state 56

    (13) condition -> expr LEQ expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    )               reduce using rule 13 (condition -> expr LEQ expr .)
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 57

    (14) condition -> expr EQEQ expr .
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    )               reduce using rule 14 (condition -> expr EQEQ expr .)
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 58

    (8) statement -> WHILE ( condition ) : . statement
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    TO              reduce using rule 12 (statement -> .)
    )               reduce using rule 12 (statement -> .)
    ELSE            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    statement                      shift and go to state 63
    expr                           shift and go to state 2
    var_assign                     shift and go to state 5

state 59

    (9) statement -> FASTERLOOP ( var_assign TO expr . ) : statement
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    )               shift and go to state 64
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 60

    (10) statement -> FOR ( var_assign TO expr . ) : statement
    (22) expr -> expr . / expr
    (23) expr -> expr . * expr
    (24) expr -> expr . - expr
    (25) expr -> expr . + expr
    )               shift and go to state 65
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 61

    (5) statement -> FUN NAME ( ) : statement .
    $end            reduce using rule 5 (statement -> FUN NAME ( ) : statement .)
    TO              reduce using rule 5 (statement -> FUN NAME ( ) : statement .)
    )               reduce using rule 5 (statement -> FUN NAME ( ) : statement .)
    ELSE            reduce using rule 5 (statement -> FUN NAME ( ) : statement .)


state 62

    (6) statement -> IF ( condition ) : statement . ELSE statement
    (7) statement -> IF ( condition ) : statement .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 66
    $end            reduce using rule 7 (statement -> IF ( condition ) : statement .)
    TO              reduce using rule 7 (statement -> IF ( condition ) : statement .)
    )               reduce using rule 7 (statement -> IF ( condition ) : statement .)


state 63

    (8) statement -> WHILE ( condition ) : statement .
    $end            reduce using rule 8 (statement -> WHILE ( condition ) : statement .)
    TO              reduce using rule 8 (statement -> WHILE ( condition ) : statement .)
    )               reduce using rule 8 (statement -> WHILE ( condition ) : statement .)
    ELSE            reduce using rule 8 (statement -> WHILE ( condition ) : statement .)


state 64

    (9) statement -> FASTERLOOP ( var_assign TO expr ) . : statement
    :               shift and go to state 67


state 65

    (10) statement -> FOR ( var_assign TO expr ) . : statement
    :               shift and go to state 68


state 66

    (6) statement -> IF ( condition ) : statement ELSE . statement
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    TO              reduce using rule 12 (statement -> .)
    )               reduce using rule 12 (statement -> .)
    ELSE            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    statement                      shift and go to state 69
    expr                           shift and go to state 2
    var_assign                     shift and go to state 5

state 67

    (9) statement -> FASTERLOOP ( var_assign TO expr ) : . statement
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    TO              reduce using rule 12 (statement -> .)
    )               reduce using rule 12 (statement -> .)
    ELSE            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    var_assign                     shift and go to state 5
    expr                           shift and go to state 2
    statement                      shift and go to state 70

state 68

    (10) statement -> FOR ( var_assign TO expr ) : . statement
    (1) statement -> . expr
    (2) statement -> . DEL NAME
    (3) statement -> . var_assign
    (4) statement -> . NAME ( )
    (5) statement -> . FUN NAME ( ) : statement
    (6) statement -> . IF ( condition ) : statement ELSE statement
    (7) statement -> . IF ( condition ) : statement
    (8) statement -> . WHILE ( condition ) : statement
    (9) statement -> . FASTERLOOP ( var_assign TO expr ) : statement
    (10) statement -> . FOR ( var_assign TO expr ) : statement
    (11) statement -> . PRINT ( statement )
    (12) statement -> .
    (18) expr -> . FLOAT
    (19) expr -> . NUMBER
    (20) expr -> . NAME
    (21) expr -> . - expr
    (22) expr -> . expr / expr
    (23) expr -> . expr * expr
    (24) expr -> . expr - expr
    (25) expr -> . expr + expr
    (15) var_assign -> . NAME = statement
    (16) var_assign -> . NAME = STRING
    (17) var_assign -> . NAME = expr
    DEL             shift and go to state 3
    NAME            shift and go to state 4
    FUN             shift and go to state 6
    IF              shift and go to state 7
    WHILE           shift and go to state 8
    FASTERLOOP      shift and go to state 9
    FOR             shift and go to state 10
    PRINT           shift and go to state 11
    $end            reduce using rule 12 (statement -> .)
    TO              reduce using rule 12 (statement -> .)
    )               reduce using rule 12 (statement -> .)
    ELSE            reduce using rule 12 (statement -> .)
    FLOAT           shift and go to state 12
    NUMBER          shift and go to state 13
    -               shift and go to state 14

    var_assign                     shift and go to state 5
    expr                           shift and go to state 2
    statement                      shift and go to state 71

state 69

    (6) statement -> IF ( condition ) : statement ELSE statement .
    $end            reduce using rule 6 (statement -> IF ( condition ) : statement ELSE statement .)
    TO              reduce using rule 6 (statement -> IF ( condition ) : statement ELSE statement .)
    )               reduce using rule 6 (statement -> IF ( condition ) : statement ELSE statement .)
    ELSE            reduce using rule 6 (statement -> IF ( condition ) : statement ELSE statement .)


state 70

    (9) statement -> FASTERLOOP ( var_assign TO expr ) : statement .
    $end            reduce using rule 9 (statement -> FASTERLOOP ( var_assign TO expr ) : statement .)
    TO              reduce using rule 9 (statement -> FASTERLOOP ( var_assign TO expr ) : statement .)
    )               reduce using rule 9 (statement -> FASTERLOOP ( var_assign TO expr ) : statement .)
    ELSE            reduce using rule 9 (statement -> FASTERLOOP ( var_assign TO expr ) : statement .)


state 71

    (10) statement -> FOR ( var_assign TO expr ) : statement .
    $end            reduce using rule 10 (statement -> FOR ( var_assign TO expr ) : statement .)
    TO              reduce using rule 10 (statement -> FOR ( var_assign TO expr ) : statement .)
    )               reduce using rule 10 (statement -> FOR ( var_assign TO expr ) : statement .)
    ELSE            reduce using rule 10 (statement -> FOR ( var_assign TO expr ) : statement .)


Conflicts:

shift/reduce conflict for ELSE in state 62 resolved as shift
reduce/reduce conflict in state 37 resolved using rule var_assign -> NAME = expr
rejected rule (statement -> expr) in state 37