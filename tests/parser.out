Grammar:

Rule 0     S' -> statement
Rule 1     statement -> expr
Rule 2     statement -> STRING . WRITE ( STRING )
Rule 3     statement -> CREATEFILE ( STRING )
Rule 4     statement -> PRINT ( STRING )
Rule 5     statement -> PRINT ( statement )
Rule 6     statement -> var_assign
Rule 7     statement -> NAME ( )
Rule 8     statement -> IF ( condition ) : statement
Rule 9     statement -> FOR ( var_assign TO expr ) : statement
Rule 10    statement -> NAME ( ) : statement
Rule 11    statement -> <empty>
Rule 12    var_assign -> NAME = statement
Rule 13    var_assign -> NAME = STRING
Rule 14    expr -> NUMBER
Rule 15    expr -> NAME
Rule 16    expr -> ( expr )
Rule 17    expr -> - expr  [precedence=right, level=3]
Rule 18    expr -> expr / expr  [precedence=left, level=2]
Rule 19    expr -> expr * expr  [precedence=left, level=2]
Rule 20    expr -> expr - expr  [precedence=left, level=1]
Rule 21    expr -> expr + expr  [precedence=left, level=1]
Rule 22    condition -> expr EQEQ expr

Terminals, with rules where they appear:

(                    : 2 3 4 5 7 8 9 10 16
)                    : 2 3 4 5 7 8 9 10 16
*                    : 19
+                    : 21
-                    : 17 20
.                    : 2
/                    : 18
:                    : 8 9 10
=                    : 12 13
CREATEFILE           : 3
EQEQ                 : 22
FOR                  : 9
IF                   : 8
NAME                 : 7 10 12 13 15
NUMBER               : 14
PRINT                : 4 5
STRING               : 2 2 3 4 13
TO                   : 9
WRITE                : 2
error                : 

Nonterminals, with rules where they appear:

condition            : 8
expr                 : 1 9 16 17 18 18 19 19 20 20 21 21 22 22
statement            : 5 8 9 10 12 0
var_assign           : 6 9


state 0

    (0) S' -> . statement
    (1) statement -> . expr
    (2) statement -> . STRING . WRITE ( STRING )
    (3) statement -> . CREATEFILE ( STRING )
    (4) statement -> . PRINT ( STRING )
    (5) statement -> . PRINT ( statement )
    (6) statement -> . var_assign
    (7) statement -> . NAME ( )
    (8) statement -> . IF ( condition ) : statement
    (9) statement -> . FOR ( var_assign TO expr ) : statement
    (10) statement -> . NAME ( ) : statement
    (11) statement -> .
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    (12) var_assign -> . NAME = statement
    (13) var_assign -> . NAME = STRING
    STRING          shift and go to state 3
    CREATEFILE      shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    $end            reduce using rule 11 (statement -> .)
    NUMBER          shift and go to state 11
    (               shift and go to state 4
    -               shift and go to state 12

    statement                      shift and go to state 1
    expr                           shift and go to state 2
    var_assign                     shift and go to state 7

state 1

    (0) S' -> statement .


state 2

    (1) statement -> expr .
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    $end            reduce using rule 1 (statement -> expr .)
    )               reduce using rule 1 (statement -> expr .)
    TO              reduce using rule 1 (statement -> expr .)
    /               shift and go to state 13
    *               shift and go to state 14
    -               shift and go to state 15
    +               shift and go to state 16


state 3

    (2) statement -> STRING . . WRITE ( STRING )
    .               shift and go to state 17


state 4

    (16) expr -> ( . expr )
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 18

state 5

    (3) statement -> CREATEFILE . ( STRING )
    (               shift and go to state 20


state 6

    (4) statement -> PRINT . ( STRING )
    (5) statement -> PRINT . ( statement )
    (               shift and go to state 21


state 7

    (6) statement -> var_assign .
    $end            reduce using rule 6 (statement -> var_assign .)
    )               reduce using rule 6 (statement -> var_assign .)
    TO              reduce using rule 6 (statement -> var_assign .)


state 8

    (7) statement -> NAME . ( )
    (10) statement -> NAME . ( ) : statement
    (15) expr -> NAME .
    (12) var_assign -> NAME . = statement
    (13) var_assign -> NAME . = STRING
    (               shift and go to state 22
    /               reduce using rule 15 (expr -> NAME .)
    *               reduce using rule 15 (expr -> NAME .)
    -               reduce using rule 15 (expr -> NAME .)
    +               reduce using rule 15 (expr -> NAME .)
    $end            reduce using rule 15 (expr -> NAME .)
    )               reduce using rule 15 (expr -> NAME .)
    TO              reduce using rule 15 (expr -> NAME .)
    =               shift and go to state 23


state 9

    (8) statement -> IF . ( condition ) : statement
    (               shift and go to state 24


state 10

    (9) statement -> FOR . ( var_assign TO expr ) : statement
    (               shift and go to state 25


state 11

    (14) expr -> NUMBER .
    /               reduce using rule 14 (expr -> NUMBER .)
    *               reduce using rule 14 (expr -> NUMBER .)
    -               reduce using rule 14 (expr -> NUMBER .)
    +               reduce using rule 14 (expr -> NUMBER .)
    $end            reduce using rule 14 (expr -> NUMBER .)
    )               reduce using rule 14 (expr -> NUMBER .)
    TO              reduce using rule 14 (expr -> NUMBER .)
    EQEQ            reduce using rule 14 (expr -> NUMBER .)


state 12

    (17) expr -> - . expr
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 26

state 13

    (18) expr -> expr / . expr
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 27

state 14

    (19) expr -> expr * . expr
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 28

state 15

    (20) expr -> expr - . expr
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 29

state 16

    (21) expr -> expr + . expr
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 30

state 17

    (2) statement -> STRING . . WRITE ( STRING )
    WRITE           shift and go to state 31


state 18

    (16) expr -> ( expr . )
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    )               shift and go to state 32
    /               shift and go to state 13
    *               shift and go to state 14
    -               shift and go to state 15
    +               shift and go to state 16


state 19

    (15) expr -> NAME .
    )               reduce using rule 15 (expr -> NAME .)
    /               reduce using rule 15 (expr -> NAME .)
    *               reduce using rule 15 (expr -> NAME .)
    -               reduce using rule 15 (expr -> NAME .)
    +               reduce using rule 15 (expr -> NAME .)
    $end            reduce using rule 15 (expr -> NAME .)
    TO              reduce using rule 15 (expr -> NAME .)
    EQEQ            reduce using rule 15 (expr -> NAME .)


state 20

    (3) statement -> CREATEFILE ( . STRING )
    STRING          shift and go to state 33


state 21

    (4) statement -> PRINT ( . STRING )
    (5) statement -> PRINT ( . statement )
    (1) statement -> . expr
    (2) statement -> . STRING . WRITE ( STRING )
    (3) statement -> . CREATEFILE ( STRING )
    (4) statement -> . PRINT ( STRING )
    (5) statement -> . PRINT ( statement )
    (6) statement -> . var_assign
    (7) statement -> . NAME ( )
    (8) statement -> . IF ( condition ) : statement
    (9) statement -> . FOR ( var_assign TO expr ) : statement
    (10) statement -> . NAME ( ) : statement
    (11) statement -> .
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    (12) var_assign -> . NAME = statement
    (13) var_assign -> . NAME = STRING
    STRING          shift and go to state 34
    CREATEFILE      shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    )               reduce using rule 11 (statement -> .)
    NUMBER          shift and go to state 11
    (               shift and go to state 4
    -               shift and go to state 12

    statement                      shift and go to state 35
    expr                           shift and go to state 2
    var_assign                     shift and go to state 7

state 22

    (7) statement -> NAME ( . )
    (10) statement -> NAME ( . ) : statement
    )               shift and go to state 36


state 23

    (12) var_assign -> NAME = . statement
    (13) var_assign -> NAME = . STRING
    (1) statement -> . expr
    (2) statement -> . STRING . WRITE ( STRING )
    (3) statement -> . CREATEFILE ( STRING )
    (4) statement -> . PRINT ( STRING )
    (5) statement -> . PRINT ( statement )
    (6) statement -> . var_assign
    (7) statement -> . NAME ( )
    (8) statement -> . IF ( condition ) : statement
    (9) statement -> . FOR ( var_assign TO expr ) : statement
    (10) statement -> . NAME ( ) : statement
    (11) statement -> .
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    (12) var_assign -> . NAME = statement
    (13) var_assign -> . NAME = STRING
    STRING          shift and go to state 38
    CREATEFILE      shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    $end            reduce using rule 11 (statement -> .)
    )               reduce using rule 11 (statement -> .)
    TO              reduce using rule 11 (statement -> .)
    NUMBER          shift and go to state 11
    (               shift and go to state 4
    -               shift and go to state 12

    statement                      shift and go to state 37
    expr                           shift and go to state 2
    var_assign                     shift and go to state 7

state 24

    (8) statement -> IF ( . condition ) : statement
    (22) condition -> . expr EQEQ expr
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    condition                      shift and go to state 39
    expr                           shift and go to state 40

state 25

    (9) statement -> FOR ( . var_assign TO expr ) : statement
    (12) var_assign -> . NAME = statement
    (13) var_assign -> . NAME = STRING
    NAME            shift and go to state 42

    var_assign                     shift and go to state 41

state 26

    (17) expr -> - expr .
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    /               reduce using rule 17 (expr -> - expr .)
    *               reduce using rule 17 (expr -> - expr .)
    -               reduce using rule 17 (expr -> - expr .)
    +               reduce using rule 17 (expr -> - expr .)
    $end            reduce using rule 17 (expr -> - expr .)
    )               reduce using rule 17 (expr -> - expr .)
    TO              reduce using rule 17 (expr -> - expr .)
    EQEQ            reduce using rule 17 (expr -> - expr .)


state 27

    (18) expr -> expr / expr .
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    /               reduce using rule 18 (expr -> expr / expr .)
    *               reduce using rule 18 (expr -> expr / expr .)
    -               reduce using rule 18 (expr -> expr / expr .)
    +               reduce using rule 18 (expr -> expr / expr .)
    $end            reduce using rule 18 (expr -> expr / expr .)
    )               reduce using rule 18 (expr -> expr / expr .)
    TO              reduce using rule 18 (expr -> expr / expr .)
    EQEQ            reduce using rule 18 (expr -> expr / expr .)


state 28

    (19) expr -> expr * expr .
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    /               reduce using rule 19 (expr -> expr * expr .)
    *               reduce using rule 19 (expr -> expr * expr .)
    -               reduce using rule 19 (expr -> expr * expr .)
    +               reduce using rule 19 (expr -> expr * expr .)
    $end            reduce using rule 19 (expr -> expr * expr .)
    )               reduce using rule 19 (expr -> expr * expr .)
    TO              reduce using rule 19 (expr -> expr * expr .)
    EQEQ            reduce using rule 19 (expr -> expr * expr .)


state 29

    (20) expr -> expr - expr .
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    -               reduce using rule 20 (expr -> expr - expr .)
    +               reduce using rule 20 (expr -> expr - expr .)
    $end            reduce using rule 20 (expr -> expr - expr .)
    )               reduce using rule 20 (expr -> expr - expr .)
    TO              reduce using rule 20 (expr -> expr - expr .)
    EQEQ            reduce using rule 20 (expr -> expr - expr .)
    /               shift and go to state 13
    *               shift and go to state 14


state 30

    (21) expr -> expr + expr .
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    -               reduce using rule 21 (expr -> expr + expr .)
    +               reduce using rule 21 (expr -> expr + expr .)
    $end            reduce using rule 21 (expr -> expr + expr .)
    )               reduce using rule 21 (expr -> expr + expr .)
    TO              reduce using rule 21 (expr -> expr + expr .)
    EQEQ            reduce using rule 21 (expr -> expr + expr .)
    /               shift and go to state 13
    *               shift and go to state 14


state 31

    (2) statement -> STRING . WRITE . ( STRING )
    (               shift and go to state 43


state 32

    (16) expr -> ( expr ) .
    /               reduce using rule 16 (expr -> ( expr ) .)
    *               reduce using rule 16 (expr -> ( expr ) .)
    -               reduce using rule 16 (expr -> ( expr ) .)
    +               reduce using rule 16 (expr -> ( expr ) .)
    $end            reduce using rule 16 (expr -> ( expr ) .)
    )               reduce using rule 16 (expr -> ( expr ) .)
    TO              reduce using rule 16 (expr -> ( expr ) .)
    EQEQ            reduce using rule 16 (expr -> ( expr ) .)


state 33

    (3) statement -> CREATEFILE ( STRING . )
    )               shift and go to state 44


state 34

    (4) statement -> PRINT ( STRING . )
    (2) statement -> STRING . . WRITE ( STRING )
    )               shift and go to state 45
    .               shift and go to state 17


state 35

    (5) statement -> PRINT ( statement . )
    )               shift and go to state 46


state 36

    (7) statement -> NAME ( ) .
    (10) statement -> NAME ( ) . : statement
    $end            reduce using rule 7 (statement -> NAME ( ) .)
    )               reduce using rule 7 (statement -> NAME ( ) .)
    TO              reduce using rule 7 (statement -> NAME ( ) .)
    :               shift and go to state 47


state 37

    (12) var_assign -> NAME = statement .
    $end            reduce using rule 12 (var_assign -> NAME = statement .)
    )               reduce using rule 12 (var_assign -> NAME = statement .)
    TO              reduce using rule 12 (var_assign -> NAME = statement .)


state 38

    (13) var_assign -> NAME = STRING .
    (2) statement -> STRING . . WRITE ( STRING )
    $end            reduce using rule 13 (var_assign -> NAME = STRING .)
    )               reduce using rule 13 (var_assign -> NAME = STRING .)
    TO              reduce using rule 13 (var_assign -> NAME = STRING .)
    .               shift and go to state 17


state 39

    (8) statement -> IF ( condition . ) : statement
    )               shift and go to state 48


state 40

    (22) condition -> expr . EQEQ expr
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    EQEQ            shift and go to state 49
    /               shift and go to state 13
    *               shift and go to state 14
    -               shift and go to state 15
    +               shift and go to state 16


state 41

    (9) statement -> FOR ( var_assign . TO expr ) : statement
    TO              shift and go to state 50


state 42

    (12) var_assign -> NAME . = statement
    (13) var_assign -> NAME . = STRING
    =               shift and go to state 23


state 43

    (2) statement -> STRING . WRITE ( . STRING )
    STRING          shift and go to state 51


state 44

    (3) statement -> CREATEFILE ( STRING ) .
    $end            reduce using rule 3 (statement -> CREATEFILE ( STRING ) .)
    )               reduce using rule 3 (statement -> CREATEFILE ( STRING ) .)
    TO              reduce using rule 3 (statement -> CREATEFILE ( STRING ) .)


state 45

    (4) statement -> PRINT ( STRING ) .
    $end            reduce using rule 4 (statement -> PRINT ( STRING ) .)
    )               reduce using rule 4 (statement -> PRINT ( STRING ) .)
    TO              reduce using rule 4 (statement -> PRINT ( STRING ) .)


state 46

    (5) statement -> PRINT ( statement ) .
    $end            reduce using rule 5 (statement -> PRINT ( statement ) .)
    )               reduce using rule 5 (statement -> PRINT ( statement ) .)
    TO              reduce using rule 5 (statement -> PRINT ( statement ) .)


state 47

    (10) statement -> NAME ( ) : . statement
    (1) statement -> . expr
    (2) statement -> . STRING . WRITE ( STRING )
    (3) statement -> . CREATEFILE ( STRING )
    (4) statement -> . PRINT ( STRING )
    (5) statement -> . PRINT ( statement )
    (6) statement -> . var_assign
    (7) statement -> . NAME ( )
    (8) statement -> . IF ( condition ) : statement
    (9) statement -> . FOR ( var_assign TO expr ) : statement
    (10) statement -> . NAME ( ) : statement
    (11) statement -> .
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    (12) var_assign -> . NAME = statement
    (13) var_assign -> . NAME = STRING
    STRING          shift and go to state 3
    CREATEFILE      shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    $end            reduce using rule 11 (statement -> .)
    )               reduce using rule 11 (statement -> .)
    TO              reduce using rule 11 (statement -> .)
    NUMBER          shift and go to state 11
    (               shift and go to state 4
    -               shift and go to state 12

    statement                      shift and go to state 52
    expr                           shift and go to state 2
    var_assign                     shift and go to state 7

state 48

    (8) statement -> IF ( condition ) . : statement
    :               shift and go to state 53


state 49

    (22) condition -> expr EQEQ . expr
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 54

state 50

    (9) statement -> FOR ( var_assign TO . expr ) : statement
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    NUMBER          shift and go to state 11
    NAME            shift and go to state 19
    (               shift and go to state 4
    -               shift and go to state 12

    expr                           shift and go to state 55

state 51

    (2) statement -> STRING . WRITE ( STRING . )
    )               shift and go to state 56


state 52

    (10) statement -> NAME ( ) : statement .
    $end            reduce using rule 10 (statement -> NAME ( ) : statement .)
    )               reduce using rule 10 (statement -> NAME ( ) : statement .)
    TO              reduce using rule 10 (statement -> NAME ( ) : statement .)


state 53

    (8) statement -> IF ( condition ) : . statement
    (1) statement -> . expr
    (2) statement -> . STRING . WRITE ( STRING )
    (3) statement -> . CREATEFILE ( STRING )
    (4) statement -> . PRINT ( STRING )
    (5) statement -> . PRINT ( statement )
    (6) statement -> . var_assign
    (7) statement -> . NAME ( )
    (8) statement -> . IF ( condition ) : statement
    (9) statement -> . FOR ( var_assign TO expr ) : statement
    (10) statement -> . NAME ( ) : statement
    (11) statement -> .
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    (12) var_assign -> . NAME = statement
    (13) var_assign -> . NAME = STRING
    STRING          shift and go to state 3
    CREATEFILE      shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    $end            reduce using rule 11 (statement -> .)
    )               reduce using rule 11 (statement -> .)
    TO              reduce using rule 11 (statement -> .)
    NUMBER          shift and go to state 11
    (               shift and go to state 4
    -               shift and go to state 12

    statement                      shift and go to state 57
    expr                           shift and go to state 2
    var_assign                     shift and go to state 7

state 54

    (22) condition -> expr EQEQ expr .
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    )               reduce using rule 22 (condition -> expr EQEQ expr .)
    /               shift and go to state 13
    *               shift and go to state 14
    -               shift and go to state 15
    +               shift and go to state 16


state 55

    (9) statement -> FOR ( var_assign TO expr . ) : statement
    (18) expr -> expr . / expr
    (19) expr -> expr . * expr
    (20) expr -> expr . - expr
    (21) expr -> expr . + expr
    )               shift and go to state 58
    /               shift and go to state 13
    *               shift and go to state 14
    -               shift and go to state 15
    +               shift and go to state 16


state 56

    (2) statement -> STRING . WRITE ( STRING ) .
    $end            reduce using rule 2 (statement -> STRING . WRITE ( STRING ) .)
    )               reduce using rule 2 (statement -> STRING . WRITE ( STRING ) .)
    TO              reduce using rule 2 (statement -> STRING . WRITE ( STRING ) .)


state 57

    (8) statement -> IF ( condition ) : statement .
    $end            reduce using rule 8 (statement -> IF ( condition ) : statement .)
    )               reduce using rule 8 (statement -> IF ( condition ) : statement .)
    TO              reduce using rule 8 (statement -> IF ( condition ) : statement .)


state 58

    (9) statement -> FOR ( var_assign TO expr ) . : statement
    :               shift and go to state 59


state 59

    (9) statement -> FOR ( var_assign TO expr ) : . statement
    (1) statement -> . expr
    (2) statement -> . STRING . WRITE ( STRING )
    (3) statement -> . CREATEFILE ( STRING )
    (4) statement -> . PRINT ( STRING )
    (5) statement -> . PRINT ( statement )
    (6) statement -> . var_assign
    (7) statement -> . NAME ( )
    (8) statement -> . IF ( condition ) : statement
    (9) statement -> . FOR ( var_assign TO expr ) : statement
    (10) statement -> . NAME ( ) : statement
    (11) statement -> .
    (14) expr -> . NUMBER
    (15) expr -> . NAME
    (16) expr -> . ( expr )
    (17) expr -> . - expr
    (18) expr -> . expr / expr
    (19) expr -> . expr * expr
    (20) expr -> . expr - expr
    (21) expr -> . expr + expr
    (12) var_assign -> . NAME = statement
    (13) var_assign -> . NAME = STRING
    STRING          shift and go to state 3
    CREATEFILE      shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    $end            reduce using rule 11 (statement -> .)
    )               reduce using rule 11 (statement -> .)
    TO              reduce using rule 11 (statement -> .)
    NUMBER          shift and go to state 11
    (               shift and go to state 4
    -               shift and go to state 12

    var_assign                     shift and go to state 7
    expr                           shift and go to state 2
    statement                      shift and go to state 60

state 60

    (9) statement -> FOR ( var_assign TO expr ) : statement .
    $end            reduce using rule 9 (statement -> FOR ( var_assign TO expr ) : statement .)
    )               reduce using rule 9 (statement -> FOR ( var_assign TO expr ) : statement .)
    TO              reduce using rule 9 (statement -> FOR ( var_assign TO expr ) : statement .)
